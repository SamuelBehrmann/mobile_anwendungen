// Mocks generated by Mockito 5.4.4 from annotations
// in medi_support/test/ui/screens/post/post_controller_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:medi_support/ui/screens/post/services/post_backend_service.dart'
    as _i3;
import 'package:medi_support/ui/screens/post/services/post_navigation_service.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [PostNavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostNavigationService extends _i1.Mock
    implements _i2.PostNavigationService {
  MockPostNavigationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void goBack() => super.noSuchMethod(
        Invocation.method(
          #goBack,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PostBackendService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostBackendService extends _i1.Mock
    implements _i3.PostBackendService {
  MockPostBackendService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i3.PostBackendServicePost> getPostStream(
          {required String? postId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPostStream,
          [],
          {#postId: postId},
        ),
        returnValue: _i4.Stream<_i3.PostBackendServicePost>.empty(),
      ) as _i4.Stream<_i3.PostBackendServicePost>);

  @override
  _i4.Future<void> submitReply({
    required String? postId,
    required String? message,
    required String? replyToMessageId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #submitReply,
          [],
          {
            #postId: postId,
            #message: message,
            #replyToMessageId: replyToMessageId,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
